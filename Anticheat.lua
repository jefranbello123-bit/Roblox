diff --git a/Anticheat.lua b/Anticheat.lua
index 8b137891791fe96927ad78e64b0aad7bded08bdc..e63f0603c05846207270589bdf76847a6c5c808e 100644
--- a/Anticheat.lua
+++ b/Anticheat.lua
@@ -1 +1,297 @@
+--!strict
+--[[
+    Roblox Anti-Cheat System
+    Author: Generated by ChatGPT
+    Description:
+        Server-side anti-cheat script designed to detect and prevent
+        speed hacks, fly hacks, teleportation, noclip, and other abnormal
+        movement exploits. Instead of banning players, the script will
+        revert them to their last known safe position when a violation is detected.
+--]]
 
+local Players = game:GetService("Players")
+local RunService = game:GetService("RunService")
+local Workspace = game:GetService("Workspace")
+
+local Settings = {
+    SpeedRatioTolerance = 2.75,
+    TeleportDistance = 25,
+    FlyHeightDelta = 12,
+    WarningCooldown = 10,
+    MaxWarnings = 6,
+    LagAllowanceStuds = 15,
+    GroundedConfirmTime = 0.3,
+    Debug = false,
+}
+
+local function debugPrint(...)
+    if Settings.Debug then
+        print("[AntiCheat]", ...)
+    end
+end
+
+local function isCharacterAlive(character)
+    local humanoid = character:FindFirstChildWhichIsA("Humanoid")
+    return humanoid ~= nil and humanoid.Health > 0
+end
+
+local function getHumanoidAndRoot(character)
+    local humanoid = character:FindFirstChildWhichIsA("Humanoid")
+    local root = character:FindFirstChild("HumanoidRootPart")
+    return humanoid, root
+end
+
+local function isPlayerInVehicle(humanoid)
+    if humanoid == nil then
+        return false
+    end
+
+    return humanoid.SeatPart ~= nil
+end
+
+local PlayerStates = {}
+
+local function initPlayerState(player)
+    PlayerStates[player] = {
+        LastPosition = nil,
+        LastVelocity = nil,
+        LastUpdate = nil,
+        LastSafeCFrame = nil,
+        GroundedTimer = 0,
+        WarningTimestamps = {},
+    }
+end
+
+local function cleanupPlayer(player)
+    PlayerStates[player] = nil
+end
+
+local function pruneWarnings(warnings)
+    local now = os.clock()
+    local filtered = {}
+
+    for _, ts in ipairs(warnings) do
+        if now - ts <= Settings.WarningCooldown then
+            table.insert(filtered, ts)
+        end
+    end
+
+    return filtered
+end
+
+local function recordWarning(player)
+    local state = PlayerStates[player]
+    if state == nil then
+        return 0
+    end
+
+    state.WarningTimestamps = pruneWarnings(state.WarningTimestamps)
+    table.insert(state.WarningTimestamps, os.clock())
+
+    return #state.WarningTimestamps
+end
+
+local function resetPlayerToSafePosition(player, root, humanoid)
+    local state = PlayerStates[player]
+    if state == nil then
+        return
+    end
+
+    local safeCFrame = state.LastSafeCFrame or root.CFrame
+
+    if humanoid then
+        humanoid.PlatformStand = true
+        task.delay(0.1, function()
+            humanoid.PlatformStand = false
+        end)
+    end
+
+    root.CFrame = safeCFrame
+    root.AssemblyLinearVelocity = Vector3.zero
+    root.AssemblyAngularVelocity = Vector3.zero
+
+    debugPrint(player.Name .. " reset to safe position due to violation.")
+end
+
+local function respawnPlayer(player)
+    local character = player.Character
+    if character == nil then
+        return
+    end
+
+    local humanoid = character:FindFirstChildWhichIsA("Humanoid")
+    if humanoid then
+        humanoid:TakeDamage(humanoid.MaxHealth)
+    end
+end
+
+local function updateSafePosition(state, root, humanoid, dt)
+    if root == nil or humanoid == nil then
+        return
+    end
+
+    local rayOrigin = root.Position
+    local rayDirection = Vector3.new(0, -5, 0)
+    local params = RaycastParams.new()
+    params.FilterDescendantsInstances = { root.Parent }
+    params.FilterType = Enum.RaycastFilterType.Exclude
+
+    local result = Workspace:Raycast(rayOrigin, rayDirection, params)
+
+    if result then
+        state.GroundedTimer += dt
+    else
+        state.GroundedTimer = 0
+    end
+
+    if state.GroundedTimer >= Settings.GroundedConfirmTime then
+        state.LastSafeCFrame = root.CFrame
+    end
+end
+
+local function detectNoclip(character, root)
+    if character == nil or root == nil then
+        return false
+    end
+
+    local touching = root:GetTouchingParts()
+    for _, part in ipairs(touching) do
+        if part.CanCollide and not part:IsDescendantOf(character) then
+            return true
+        end
+    end
+
+    return false
+end
+
+local function enforceCorrection(player, root, humanoid)
+    local warnings = recordWarning(player)
+    if warnings >= Settings.MaxWarnings then
+        respawnPlayer(player)
+    else
+        resetPlayerToSafePosition(player, root, humanoid)
+    end
+end
+
+local function verifyCharacter(player, dt)
+    local state = PlayerStates[player]
+    local character = player.Character
+    if state == nil or character == nil then
+        return
+    end
+
+    local humanoid, root = getHumanoidAndRoot(character)
+    if humanoid == nil or root == nil or not isCharacterAlive(character) then
+        return
+    end
+
+    local now = os.clock()
+    if state.LastUpdate == nil then
+        state.LastUpdate = now
+        state.LastPosition = root.Position
+        state.LastVelocity = root.AssemblyLinearVelocity
+        state.LastSafeCFrame = root.CFrame
+        return
+    end
+
+    local lastPos = state.LastPosition
+    local lastUpdate = state.LastUpdate
+    local delta = math.max(now - lastUpdate, dt)
+
+    state.LastUpdate = now
+    state.LastPosition = root.Position
+    state.LastVelocity = root.AssemblyLinearVelocity
+
+    local expected = (humanoid.WalkSpeed + humanoid.JumpPower) * delta
+    local traveled = (root.Position - lastPos).Magnitude
+
+    if delta > 1 then
+        debugPrint(player.Name .. " had large delta (" .. delta .. "s), skipping enforcement.")
+        updateSafePosition(state, root, humanoid, delta)
+        return
+    end
+
+    local allowedDistance = expected * Settings.SpeedRatioTolerance + Settings.LagAllowanceStuds
+
+    if traveled > allowedDistance then
+        debugPrint(player.Name .. " exceeded allowed distance: " .. traveled .. " > " .. allowedDistance)
+        enforceCorrection(player, root, humanoid)
+        return
+    end
+
+    if traveled > Settings.TeleportDistance then
+        debugPrint(player.Name .. " triggered teleport detection: " .. traveled)
+        enforceCorrection(player, root, humanoid)
+        return
+    end
+
+    local verticalDelta = math.abs(root.Position.Y - lastPos.Y)
+    local isAirborne = humanoid.FloorMaterial == Enum.Material.Air and not isPlayerInVehicle(humanoid)
+    if isAirborne and verticalDelta > Settings.FlyHeightDelta then
+        debugPrint(player.Name .. " triggered fly detection: " .. verticalDelta)
+        enforceCorrection(player, root, humanoid)
+        return
+    end
+
+    if detectNoclip(character, root) then
+        debugPrint(player.Name .. " triggered noclip detection.")
+        enforceCorrection(player, root, humanoid)
+        return
+    end
+
+    updateSafePosition(state, root, humanoid, dt)
+end
+
+local function setupPlayer(player)
+    initPlayerState(player)
+
+    local function onCharacterAdded(character)
+        local humanoid, root = getHumanoidAndRoot(character)
+        if humanoid and root then
+            local state = PlayerStates[player]
+            if state then
+                state.LastPosition = root.Position
+                state.LastVelocity = root.AssemblyLinearVelocity
+                state.LastSafeCFrame = root.CFrame
+                state.LastUpdate = os.clock()
+            end
+        end
+    end
+
+    player.CharacterAdded:Connect(onCharacterAdded)
+    if player.Character then
+        onCharacterAdded(player.Character)
+    end
+
+    player.CharacterRemoving:Connect(function()
+        initPlayerState(player)
+    end)
+end
+
+Players.PlayerAdded:Connect(setupPlayer)
+
+Players.PlayerRemoving:Connect(function(player)
+    cleanupPlayer(player)
+end)
+
+RunService.Heartbeat:Connect(function(dt)
+    for player, _ in pairs(PlayerStates) do
+        local success, err = pcall(function()
+            verifyCharacter(player, dt)
+        end)
+        if not success then
+            warn("[AntiCheat] Error verifying player " .. player.Name .. ": " .. tostring(err))
+        end
+    end
+end)
+
+for _, player in ipairs(Players:GetPlayers()) do
+    setupPlayer(player)
+end
+
+--[[
+    Usage:
+        Place this script in ServerScriptService. The script will automatically
+        monitor player characters and revert them to their last safe position if
+        abnormal movement is detected.
+--]]

